var Recaius=function(e){function t(n){if(r[n])return r[n].exports;var s=r[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=r(1);e.exports={urlJoin:function(e,t){return e.replace(/\/{1,}$/,"")+"/"+t.replace(/^\/{1,}/,"")},getRecaiusUrl:function(t,r,n){return e.exports.urlJoin(t,n)+"/"+r},clone:function(t){if(null===t||"object"!==(void 0===t?"undefined":n(t))||"isActiveClone"in t)return t;if(t instanceof Date)var r=new t.constructor;else var r=t.constructor();for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t.isActiveClone=null,r[s]=e.exports.clone(t[s]),delete t.isActiveClone);return r},throwError:function(e){throw e},typedArrayView:function(e,t,r){return void 0===r?new e.constructor(e.buffer,e.BYTES_PER_ELEMENT*t):new e.constructor(e.buffer,e.BYTES_PER_ELEMENT*t,r)},copyItemIfPresent:function(e,t,r){return!!e.hasOwnProperty(r)&&(t[r]=e[r],!0)},waitFor:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=setInterval(function(){e()&&clearInterval(r)},t)},sleep:function(e){return new Promise(function(t,r){setTimeout(function(){return t()},e)})},withTimeout:function(e,t){return Promise.race([e,new Promise(function(e,r){return setTimeout(function(){return r(new s.TimeoutError(t))},t)})])},downloadBuffer:function(e){var t=this.encodeWAV(e),r=new Blob([t],{type:"audio/wav"});forceDownload(r,"out.wav")},forceDownload:function(e,t){var r=(window.URL||window.webkitURL).createObjectURL(e),n=window.document.createElement("a");n.href=r,n.download=t||"output.wav";var s=document.createEvent("Event");s.initEvent("click",!0,!0),n.dispatchEvent(s)},floatTo16BitPCM:function(e,t,r){for(var n=0;n<r.length;n++,t+=2){var s=Math.max(-1,Math.min(1,r[n]));e.setInt16(t,s<0?32768*s:32767*s,!0)}},writeString:function(e,t,r){for(var n=0;n<r.length;n++)e.setUint8(t+n,r.charCodeAt(n))},encodeWav:function(e){var t=new ArrayBuffer(44+2*e.length),r=new DataView(t);return this.writeString(r,0,"RIFF"),r.setUint32(4,36+2*e.length,!0),this.writeString(r,8,"WAVE"),this.writeString(r,12,"fmt "),r.setUint32(16,16,!0),r.setUint16(20,1,!0),r.setUint16(22,1,!0),r.setUint32(24,16e3,!0),r.setUint32(28,32e3,!0),r.setUint16(32,2,!0),r.setUint16(34,16,!0),this.writeString(r,36,"data"),r.setUint32(40,2*e.length,!0),this.floatTo16BitPCM(r,44,e),r},parseWav:function(t){var r=void 0;if(r=t instanceof ArrayBuffer?new DataView(t):new DataView(t.buffer),1179011410!=r.getUint32(0,!0))throw TypeError("Not a wave format");if(1163280727!=r.getUint32(8,!0))throw TypeError("Not a wave format");if(544501094!=r.getUint32(12,!0))throw TypeError("Not a wave format");var n=r.getUint32(16,!0),s=r.getUint16(22,!0),o=r.getUint32(24,!0),i=(r.getUint32(28,!0),r.getUint16(32,!0),r.getUint16(34,!0)),a=16+n+8,u={channelNum:s,sampleRate:o};return u.data=new Int16Array(r.buffer,a),16==i?(u.type="linear",2==s&&(u.data=e.exports.convertStereoToMonoral(u.data))):u.type,u},convertStereoToMonoral:function(e){for(var t=new Int16Array(e.length/2),r=0;r<e.length;r+=2)t[r]=e[r]+e[r+1]/2;return t}}},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){function t(){n(this,t);var e=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"Need login"));return e.message="Need login",e.name="NeedLoginError",e}return o(t,e),t}(Error),a=function(e){function t(e){n(this,t);var r="Require argument: "+e,o=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r));return o.message=r,o.name="RequireArgumentError",o}return o(t,e),t}(Error),u=function(e){function t(){n(this,t);var e=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"ASR not started"));return e.message="ASR not started",e.name="NotStartedError",e}return o(t,e),t}(Error),h=function(e){function t(){n(this,t);var e=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"Timeout"));return e.message="Timeout",e.name="TimeoutError",e}return o(t,e),t}(Error);e.exports={NeedLoginError:i,RequireArgumentError:a,NotStartedError:u,TimeoutError:h}},function(e,t,r){function n(e,t,r,n){var o={method:t,headers:{}};if(n.hasOwnProperty("headers")&&(o.headers=n.headers),n.hasOwnProperty("json"))o.body=JSON.stringify(n.json),o.headers["Content-type"]="application/json; charset=utf-8";else if(n.hasOwnProperty("body"))o.body=n.body;else if(n.hasOwnProperty("formData")){var i=new FormData;Object.keys(n.formData).forEach(function(e){n.formData[e]instanceof Uint8Array?i.append(e,new Blob([n.formData[e]])):i.append(e,n.formData[e])}),o.body=i}else if(n.hasOwnProperty("qs")){var a=new URL(a);Object.keys(n.qs).forEach(function(e){return a.searchParams.append(e,n.qs[e])})}return n.hasOwnProperty("timeout")?s.withTimeout(fetch(e,o),n.timeout):fetch(e,o).then(function(e){return e.ok?Promise.resolve().then(function(){return r?e.arrayBuffer():e.text().then(function(e){try{return JSON.parse(e)}catch(t){return e}})}).then(function(t){return{status:e.status,data:t}}):e.text().then(function(t){return Promise.reject({status:e.status,data:t})})})}var s=r(0),o=void 0;try{r(!function(){var e=new Error('Cannot find module "request"');throw e.code="MODULE_NOT_FOUND",e}())}catch(e){}e.exports={requestJson:function(t,r,n){return e.exports.request(t,r,!1,n).then(function(e){return e.data})},requestRaw:function(t,r,n){return e.exports.request(t,r,!0,n).then(function(e){return e.data})},request:function(e,t,r,s){return void 0===o?n(e,t,r,s):new Promise(function(n,i){var a={url:e,method:t};Object.keys(s).forEach(function(e){return a[e]=s[e]}),r&&(a.encoding=null),o(a,function(e,t,s){e&&i(e);var o={status:t.statusCode};if(o.status>=400){try{o.detail=JSON.parse(s)}catch(e){o.detail=s}i(o)}if(r)o.data=s;else if(s.length>0)try{o.data=JSON.parse(s)}catch(e){if(0!=t.headers["content-type"].indexOf("text"))throw e;o.data=s}else o.data=null;n(o)})})}}},function(e,t,r){e.exports=r(4)},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(5),i=r(6),a=r(7),u=r(8),h=r(9),c=r(10),l=r(0),f=r(1),p={url:"https://api.recaius.jp/",version:"v2",proxy:void 0,auth:{},asr:{},tts:{},mt:{},iip:{}},d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n(this,e),this._config=this.readConfig(t,r),this.auth=new o(this._config),this.tts=new a(this._config,this.auth),this.mt=new u(this._config,this.auth),this.asr=new i(this._config,this.auth),this.iip=new h(this._config,this.auth),this.getMic=c.getMic,this.exceptions=f}return s(e,[{key:"readConfig",value:function(e,t){var r=l.clone(p);return Object.keys(r).forEach(function(t){e.hasOwnProperty(t)&&(r[t]=l.clone(e[t]))}),null!=t.expire_sec&&(r.auth.expiry_sec=t.expire_sec),r}}]),e}();e.exports=d},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),i=r(2),a=r(1),u=function(){function e(t){n(this,e),this._token=null,this._config=t,this._url=o.getRecaiusUrl(t.url,t.version,"auth"),this._lastLogin=null,this._expire=null}return s(e,[{key:"setConfig",value:function(e){this._params=e}},{key:"login",value:function(){var e=this,t=o.urlJoin(this._url,"tokens"),r=this._config.auth;return this._requestJson(t,"POST",JSON.stringify(r)).then(function(t){e._token=t.token,e._lastLogin=Date.now(),e._expire=1e3*t.expiry_sec})}},{key:"logout",value:function(){var e=this,t=o.urlJoin(this._url,"tokens");return this._requestJson(t,"DELETE",null,this.token(!1)).then(function(){e._token=null})}},{key:"token",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(null===this._token||e&&this.needLogin())throw new a.NeedLoginError;return this._token}},{key:"needLogin",value:function(){if(!this._token||!this._lastLogin)return!0;var e=Date.now();return this._lastLogin+this._expire<e+3e4}},{key:"_requestJson",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s={headers:{"Content-Type":"application/json"},body:r,proxy:this._config.proxy};return null!=n&&(s.headers["X-Token"]=n),i.requestJson(e,t,s)}}]),e}();e.exports=u},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),i=r(2),a=r(1),u=[-.00074137037,-.0011531283,-.00021740662,.0012790698,.0015922,-3.4433974e-18,-.0020013065,-.0020233887,.00043397098,.0029163663,.0023894008,-.0011475103,-.0040206192,-.0026171816,.0022067504,.0052971887,.0026168107,-.0036817563,-.0067156054,-.0022786677,.0056507799,.0082325512,.0014663481,-.0082112125,-.0097937101,1.0208823e-17,.011504166,.011336633,-.0023823846,-.015769542,-.012794431,.006118992,.021479134,.014100024,-.012078595,-.029709077,-.015190611,.022394622,.04346599,.016012,-.044309316,-.074967798,-.016522431,.12862139,.28390915,.35060704,.28390915,.12862139,-.016522431,-.074967798,-.044309316,.016012,.04346599,.022394622,-.015190611,-.029709077,-.012078595,.014100024,.021479134,.006118992,-.012794431,-.015769542,-.0023823846,.011336633,.011504166,1.0208823e-17,-.0097937101,-.0082112125,.0014663481,.0082325512,.0056507799,-.0022786677,-.0067156054,-.0036817563,.0026168107,.0052971887,.0022067504,-.0026171816,-.0040206192,-.0011475103,.0023894008,.0029163663,.00043397098,-.0020233887,-.0020013065,-3.4433974e-18,.0015922,.0012790698,-.00021740662,-.0011531283,-.00074137037],h=function(){function e(t,r){n(this,e),this._config=t,this._auth=r,this._url=o.getRecaiusUrl(t.url,t.version,"asr")}return s(e,[{key:"newSession",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.inputType||"linear/int16",r=e.sampleRate||16e3,n=e.sendInterval||512;return new c(this._config,this._auth,this._url,t,r,n)}},{key:"recognize",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=void 0,s=e;if(r.hasOwnProperty("inputType"))if("wave"==r.inputType){var i=o.parseWav(e);n=this.newSession({sampleRate:i.sampleRate}),s=i.data}else n=this.newSession({inputType:r.inputType,sampleRate:optoins.sampleRate});else n=this.newSession();var a=3e4;r.hasOwnProperty("wait")&&(a=r.wait);var u=[];return n.setCallback("Result",function(e){u.push(e)}),n.start(t).then(function(){return n.sendData(s)}).then(function(){return n.flush()}).then(function(){return n.checkResultFor("NoData",a)}).then(function(){return u})}},{key:"getRawFromWave",value:function(e){return o.parseWav(e).data}}]),e}(),c=function(){function e(t,r,s,o,i,a){if(n(this,e),this._config=t,this._auth=r,this._url=s,this._uuid=null,this._asrParams=null,this._sampleRate=i,this._targetRate=16e3,this._rateRatio=this._sampleRate/this._targetRate,this._voiceId=0,this._setInputType(o),this._setSendInterval(a),this._sampleRate<this._targetRate)throw new TypeError("Upsampling is not supported yet.");this._pushedBuffer=null,this._pushedDataStack=[],this._pushedBufferCount=0,this._eventCallbacks={},this._internalEventCallbacks={},this._canRequest=!1,this._isStarted=!1}return s(e,[{key:"setCallback",value:function(e,t){this._eventCallbacks.hasOwnProperty(e)?this._eventCallbacks[e].push(t):this._eventCallbacks[e]=[t]}},{key:"unsetCallback",value:function(e,t){if(this._eventCallbacks.hasOwnProperty(e))for(var r=0;r<this._eventCallbacks[e].length;++r)if(t===this._eventCallbacks[e[r]])return void this._eventCallbacks[e].splice(r,1)}},{key:"start",value:function(e){var t=this;return e.hasOwnProperty("model_id")||o.throwError(new a.RequireArgumentError("model_id")),this._canRequest=!0,this._request("voices",{method:"POST",params:e}).then(function(r){return t._uuid=r.uuid,t._voiceId=1,t._asrParams=e,"speex"!=t._inputType&&(t._pushedBuffer=new t._InputTypeClass(t._storeSize)),t._pushedDataStack=[],t._pushedBufferCount=0,t._isStarted=!0,r})}},{key:"stop",value:function(){null===this._uuid&&o.throwError(new a.NotStartedError);var e=this._uuid;this._uuid=null,this._voiceId=0,this._asrParams=null,this._pushedBuffer=null,this._pushedDataStack=[],this._pushedBufferCount=0;var t=this._request("voices/"+e,{method:"DELETE"});return this._canRequest=!1,this._isStarted=!1,t}},{key:"push",value:function(e){if(this._isStarted){if(null===this._uuid&&o.throwError(new a.NotStartedError),this._rateRatio<1)throw new Error("downsampling rate should be smaller than original sample rate");if(!(e instanceof this._InputTypeClass))throw new Error("You can only push "+this._InputTypeClass+", or use setInputType()");"speex"==this._inputType?this._send(e):(this._pushedDataStack.push(e.slice(0)),this._push())}}},{key:"flush",value:function(){var e=this;null===this._uuid&&o.throwError(new a.NotStartedError),this._pushedDataStack.push(null),this._push();var t={method:"PUT",params:{voice_id:this._voiceId}};return this._voiceId+=1,this._request("voices/"+this._uuid+"/flush",t).then(function(t){return e._parseAsrResult(t),t})}},{key:"checkResult",value:function(){var e=this;return this._request("voices/"+this._uuid+"/results",{method:"GET"}).then(function(t){return e._parseAsrResult(t),t})}},{key:"checkResultFor",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e4,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:500,s=new Promise(function(r,s){var i=!1;t._setCallback(e,function(e){i=!0,r(e)}),t.checkResult().then(function(){i||o.sleep(n).then(function(){return t.checkResult()})})});return o.withTimeout(s,r)}},{key:"sendData",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==r&&(r=this._voiceId);var n=this._preprocessBeforeSend(e),s=new Uint8Array(n.buffer),o={voice_id:r,voice:s};return this._voiceId+=1,this._request("voices/"+this._uuid,{method:"PUT",formData:o}).then(function(e){t._emit("Send",e),t._parseAsrResult(e)})}},{key:"getBaseModels",value:function(){return this._request("models",{method:"GET"})}},{key:"getBaseModelConf",value:function(e){return this._request("models/"+e+"/configuration",{method:"GET"})}},{key:"updateBaseModelConf",value:function(e,t){return this._request("models/"+e+"/configuration",{method:"PUT",params:t})}},{key:"getUserModels",value:function(){return this._request("userlexicons",{method:"GET"})}},{key:"createUserModel",value:function(e){return this._request("userlexicons",{method:"POST",params:{base_model_id:e}})}},{key:"deleteUserModel",value:function(e){return this._request("userlexicons/"+e,{method:"DELETE"})}},{key:"updateUserModelDescription",value:function(e,t){return this._request("userlexicons/"+e,{method:"PUT",params:{description:t}})}},{key:"getUserModelConf",value:function(e){return this._request("userlexicons/"+e+"/configuration",{method:"GET"})}},{key:"updateUserModelConf",value:function(e,t){return this._request("userlexicons/"+e+"/configuration",{method:"PUT",params:t})}},{key:"getLexicon",value:function(e){return this._request("userlexicons/"+e+"/contents",{method:"GET"})}},{key:"updateLexicon",value:function(e,t){return this._request("userlexicons/"+e+"/contents",{method:"PUT",params:{ulex:t}})}},{key:"getDomainTypes",value:function(){return this._request("domainlexicons",{method:"GET"})}},{key:"_setCallback",value:function(e,t){this._internalEventCallbacks.hasOwnProperty(e)||(this._internalEventCallbacks[e]=t)}},{key:"_unsetCallback",value:function(e){this._internalEventCallbacks.hasOwnProperty(e)||delete this._internalEventCallbacks[e]}},{key:"_emit",value:function(e,t){this._eventCallbacks.hasOwnProperty(e)&&this._eventCallbacks[e].forEach(function(e){e(t)}),this._internalEventCallbacks.hasOwnProperty(e)&&this._internalEventCallbacks[e](t)}},{key:"_setSendInterval",value:function(e){"linear/float32"==this._inputType||"linear/int16"==this._inputType?(this._storeSize=e*this._sampleRate/1e3,this._sampleRate!=this._targetRate&&(this._storeSize=e*this._sampleRate/1e3+u.length-1)):"adpcm"==this._inputType?this._storeSize=e*this._sampleRate/1e3/2:"speex"==this._inputType&&(this._storeSize=null)}},{key:"_setInputType",value:function(e){this._inputType=e,"linear/int16"==e?(this._InputTypeClass=Int16Array,this._inputTypeClassName="i16"):(this._InputTypeClass=Float32Array,this._inputTypeClassName="f32")}},{key:"_push",value:function(){if(0!=this._pushedDataStack.length){if(null==this._pushedDataStack[0])return void this._prepareToSend();if("speex"==this._inputType)throw new TypeError("No speex here");if(console.assert(this._storeSize===this._pushedBuffer.length,"error 1"),this._pushedBufferCount+this._pushedDataStack[0].length<this._storeSize)this._pushedBuffer.set(this._pushedDataStack[0],this._pushedBufferCount),this._pushedBufferCount+=this._pushedDataStack[0].length,this._pushedDataStack.shift();else if(this._pushedBufferCount+this._pushedDataStack[0].length==this._storeSize)this._pushedBuffer.set(this._pushedDataStack[0],this._pushedBufferCount),this._pushedBufferCount+=this._pushedDataStack[0].length,console.assert(this._storeSize===this._pushedBufferCount,"error 2"),this._sampleRate!=this._targetRate?this._pushedDataStack[0]=o.typedArrayView(this._pushedBuffer,yhis._pushedBuffer.length-(u.length-1)):this._pushedDataStack.shift(),this._prepareToSend();else{var e=o.typedArrayView(this._pushedDataStack[0],0,this._storeSize-this._pushedBufferCount);this._pushedBuffer.set(e,this._pushedBufferCount),this._pushedBufferCount+=e.length,console.assert(this._storeSize===this._pushedBufferCount),this._sampleRate!=this._targetRate?e.length<u.length-1?(this._pushedDataStack[0]=o.typedArrayView(this._pushedDataStack[0],0),this._pushedDataStack.unshift(o.typedArrayView(this._pushedBuffer,this._pushedBuffer.length-(u.length-1-e.length)))):this._pushedDataStack[0]=o.typedArrayView(this._pushedDataStack[0],e.length-(u.length-1)):this._pushedDataStack[0]=o.typedArrayView(this._pushedDataStack[0],e.length),this._prepareToSend()}this._push()}}},{key:"_request",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(!this._canRequest)return Promise.resolve();var n=o.urlJoin(this._url,e),s={headers:{"Content-Type":"application/json","X-Token":this._auth.token()},proxy:this._config.proxy},a=t.method||"POST";return t.hasOwnProperty("params")?s.body=JSON.stringify(t.params):t.hasOwnProperty("body")?s.body=t.body:t.hasOwnProperty("formData")&&(s.formData=t.formData,s.headers["Content-Type"]="multipart/form-data"),t.hasOwnProperty("headers")&&Object.keys(t.headers).forEach(function(e){s.headers[e]=t.headers[e]}),r?i.requestJson(n,a,s):i.requestRaw(n,a,s)}},{key:"_prepareToSend",value:function(){if(0!=this._pushedBufferCount){var e=this._pushedBuffer,t=this._voiceId;this._pushedBuffer=new this._InputTypeClass(this._storeSize),this._pushedBufferCount=0,this.sendData(e,t)}}},{key:"_preprocessBeforeSend",value:function(e){this._sampleRate!=this._targetRate&&(e=this._filterFIRAndDownSampling(e));var t=void 0;if("f32"===this._inputTypeClassName){t=new Int16Array(e.length);for(var r=0;r<e.length;++r){var n=Math.max(-1,Math.min(1,e[r]));n*=n<0?32768:32767,t[r]=n}}else t=e;return t}},{key:"_filterFIRAndDownSampling",value:function(e){for(var t=Math.ceil((e.length-(u.length-1))/this._rateRatio),r=new this._InputTypeClass(t),n=0,s=0;;s+=this._rateRatio){var i=Math.floor(s);if(i+u.length-1>=e.length)break;for(var a=0,h=0;h<u.length;++h)a+=u[h]*e[i+h];"i16"===this._inputTypeClassName?r[n]=Math.round(a):r[n]=a,++n}if(r.length<n)throw new Error("Invalid conversion");return r.length!=n&&(r=o.typedArrayView(r,0,n)),r}},{key:"_parseAsrResult",value:function(e){var t=this;if(e)return e.forEach(function(e){var r=void 0,n=void 0,s=void 0;if(t._asrParams.hasOwnProperty("result_type")&&"one_best"!=t._asrParams.result_type?"nbest"==t._asrParams.result_type?(r=e.type,n=t._parseNbest,s=function(e){return e.result}):"confnet"==t._asrParams.result_type&&(r=e.type,n=t._parseConfnet,s=function(e){return e.result}):(r=e[0],n=t._parseOnebest,s=function(e){return e[1]}),"RESULT"==r){var o=n(e);t._emit("Result",o)}else if("TMP_RESULT"==r){var i=s(e);t._emit("TmpResult",i)}else"SOS"==r?t._emit("SOS"):"NO_DATA"==r?(t._canRequest=!1,t._emit("NoData")):"REJECT"==r?t._emit("Reject"):"TIMEOUT"==r?t._emit("Timeout"):"TOO_LONG"==r&&t._emit("TooLong")}),e}},{key:"_parseOnebest",value:function(e){return e[1]}},{key:"_parseNbest",value:function(e){return e.result}},{key:"_parseConfnet",value:function(e){throw new Error("not implemented")}}]),e}();e.exports=h},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),i=r(2),a=r(1),u=function(){function e(t,r){n(this,e),this._auth=r,this._config=t,this._url=o.getRecaiusUrl(t.url,t.version,"tts")}return s(e,[{key:"getSound",value:function(e){return e.hasOwnProperty("lang")||o.throwError(new a.RequireArgumentError("lang")),e.hasOwnProperty("speaker_id")||o.throwError(new a.RequireArgumentError("speaker_id")),e.hasOwnProperty("phonetic_text")?this._request("phonetictext2speechwave",{params:e},!1):this._request("plaintext2speechwave",{params:e},!1)}},{key:"getPhoneticText",value:function(e){return e.hasOwnProperty("plain_text")||o.throwError(new a.RequireArgumentError("plain_text")),e.hasOwnProperty("lang")||o.throwError(new a.RequireArgumentError("lang")),this._request("plaintext2phonetictext",{params:e})}},{key:"getSpeakers",value:function(){return this._request("speakers",{method:"GET"})}},{key:"getLexiconDictList",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._request("userlexicons/${lexiconId}",{method:"GET",params:t})}},{key:"updateLexicon",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._request("userlexicons/${lexiconId}",{method:"PUT",params:t},!1)}},{key:"copyLecixonWords",value:function(e,t){return t.hasOwnProperty("user_lang_dic_id")||o.throwError(new a.RequireArgumentError("user_lang_dic_id")),t.hasOwnProperty("dest_user_lang_dic_id")||o.throwError(new a.RequireArgumentError("dest_user_lang_dic_id")),this._request("userlexicons/copy",{params:t})}},{key:"getLexiconWords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r="binary"==t.response_time;return this._request("userlexicons/${lexiconId}/words",{method:"GET",parmas:t},r)}},{key:"deleteAllLexiconWords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._request("userlexicons/${lexiconId}/words",{method:"DELETE",params:t})}},{key:"addWord",value:function(e,t){return t.hasOwnProperty("ulex")||o.throwError(new a.RequireArgumentError("ulex")),this._request("userlexicons/${lexiconId}/words",{method:"PUT",params:t})}},{key:"deleteWord",value:function(e,t){return t.hasOwnProperty("ulex")||o.throwError(new a.RequireArgumentError("ulex")),this._request("userlexicons/${lexiconId}/words",{method:"POST",params:t})}},{key:"getProgress",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return this._request("userlexicons/${lexiconId}/${pid}",{method:"GET",params:r})}},{key:"_request",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=o.urlJoin(this._url,e),s={headers:{"Content-Type":"application/json","X-Token":this._auth.token()},proxy:this._config.proxy},a=t.method||"POST";return t.hasOwnProperty("params")&&(s.body=JSON.stringify(t.params)),r?i.requestJson(n,a,s):i.requestRaw(n,a,s)}}]),e}();e.exports=u},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),i=r(2),a=r(1),u=function(){function e(t,r){n(this,e),this._auth=r,this._config=t,this._url=o.getRecaiusUrl(t.url,t.version,"mt")}return s(e,[{key:"translate",value:function(e){return this._translate(e)}},{key:"arrange",value:function(e){return this._arrange(e)}},{key:"_translate",value:function(e){return e.hasOwnProperty("query")||o.throwError(new a.RequireArgumentError("query")),e.hasOwnProperty("src_lang")||o.throwError(new a.RequireArgumentError("src_lang")),e.hasOwnProperty("tgt_lang")||o.throwError(new a.RequireArgumentError("tgt_lang")),e.mode=e.mode||"spoken_language",this._requestJson("translate",e)}},{key:"_arrange",value:function(e){var t=e.src_lang||o.throwError(new a.RequireArgumentError("src_lang")),r=e.query||o.throwError(new a.RequireArgumentError("query")),n={src_lang:t,query:r};return this._requestJson("arrange",n)}},{key:"_requestJson",value:function(e,t){var r=o.urlJoin(this._url,e);return i.requestJson(r,"POST",{headers:{"Content-Type":"application/json","X-Token":this._auth.token()},body:JSON.stringify(t),proxy:this._config.proxy})}}]),e}();e.exports=u},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),i=r(2),a=r(1),u=function(){function e(t,r){n(this,e),this._auth=r,this._config=t,this._url=o.getRecaiusUrl(t.url,t.version,"iip")}return s(e,[{key:"addDatabase",value:function(e,t){return this._request("databases",{method:"POST",headers:{"X-User":e},params:{dbname:t}})}},{key:"getDatabases",value:function(e){return this._request("databases",{method:"GET",headers:{"X-User":e}})}},{key:"deleteDatabase",value:function(e,t){return this._request("databases/"+t,{method:"DELETE",headers:{"X-User":e}})}},{key:"getDatabaseProperty",value:function(e,t){return this._request("databases/"+t+"/properties",{method:"GET",headers:{"X-User":e}})}},{key:"updateVocabulary",value:function(e,t){return this._request("databases/"+t+"/dictionaries",{headers:{"X-Users":e}})}},{key:"getDatabaseKeywords",value:function(e,t){return this._request("databases/"+t+"/keywords",{method:"GET",headers:{"X-User":e}})}},{key:"addDocument",value:function(e,t,r){var n={};return o.copyItemIfPresent(r,n,"name")||o.throwError(new a.RequireArgumentError("name")),o.copyItemIfPresent(r,n,"text"),o.copyItemIfPresent(r,n,"file"),n.hasOwnProperty("file")?o.copyItemIfPresent(r,n,"filename"):n.hasOwnProperty("text")||o.throwError(new a.RequireArgumentError("text or file")),o.copyItemIfPresent(r,n,"length"),o.copyItemIfPresent(r,n,"tags"),o.copyItemIfPresent(r,n,"uri"),this._request("databases/"+t,{headers:{"X-User":e},formData:n})}},{key:"findDocument",value:function(e,t,r){var n={};return o.copyItemIfPresent(r,n,"query")||o.throwError(new a.RequireArgumentError("query")),o.copyItemIfPresent(r,n,"type"),o.copyItemIfPresent(r,n,"count"),o.copyItemIfPresent(r,n,"length"),this._request("databases/"+t,{method:"GET",headers:{"X-User":e},params:n})}},{key:"getDocumentProperty",value:function(e,t){return this._request("databases/"+t+"/properties",{method:"GET",headers:{"X-User":e}})}},{key:"deleteDocument",value:function(e,t,r){return this._request("databases/"+t+"/"+r+"/",{method:"DELETE",headers:{"X-User":e}})}},{key:"updateDocumentProperty",value:function(e,t,r,n){var s={};return o.copyItemIfPresent(n,s,"name"),o.copyItemIfPresent(n,s,"tags"),o.copyItemIfPresent(n,s,"uri"),o.copyItemIfPresent(n,s,"length"),this._request("databases/"+t+"/"+r+"/properties",{method:"PUT",headers:{"X-User":e},params:s})}},{key:"getDocument",value:function(e,t,r){return this._request("databases/"+t+"/"+r+"/file",{method:"GET",headers:{"X-User":e}},!1)}},{key:"extractDatabaseKeyword",value:function(e,t,r){var n={};return o.copyItemIfPresent(r,n,"text")||o.throwError(new a.RequireArgumentError("name")),o.copyItemIfPresent(r,n,"count"),this._request("databases/"+t+"/search_words",{method:"GET",headers:{"X-User":e},params:n})}},{key:"getDocumentKeywords",value:function(e,t,r){var n={};return o.copyItemIfPresent(r,n,"docids")||o.throwError(new a.RequireArgumentError("docids")),o.copyItemIfPresent(r,n,"count"),this._request("/databases/"+t+"/documents/specific_words",{method:"GET",headers:{"X-User":e},params:n})}},{key:"tokenizeText",value:function(e,t){return this._request("/texts/tokens",{method:"GET",headers:{"X-User":e},params:{text:t}})}},{key:"getTextImportance",value:function(e,t){var r={};return o.copyItemIfPresent(t,r,"text"),o.copyItemIfPresent(t,r,"sentences"),r.hasOwnProperty("text")||r.hasOwnProperty("sentences")||o.throwError(new a.RequireArgumentError("text or sentences")),r.hasOwnProperty("text")&&r.hasOwnProperty("sentences")&&o.throwError(new a.RequireArgumentError("set just one parameter: text or sentences")),this._request("/texts/ranks",{method:"GET",headers:{"X-User":e},params:r})}},{key:"extractKeyword",value:function(e,t){var r={};return o.copyItemIfPresent(t,r,"text")||o.throwError(new a.RequireArgumentError("text")),o.copyItemIfPresent(t,r,"count"),this._request("/texts/keywords",{method:"GET",headers:{"X-User":e},params:r})}},{key:"_request",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=o.urlJoin(this._url,e),s={headers:{"Content-Type":"application/json","X-Token":this._auth.token()},proxy:this._config.proxy},a=t.method||"POST";return t.hasOwnProperty("params")?"POST"==a||"PUT"==a?s.body=JSON.stringify(t.params):s.qs=t.params:t.hasOwnProperty("formData")&&(s.formData=t.formData,s.headers["Content-Type"]="multipart/form-data"),t.hasOwnProperty("headers")&&Object.keys(t.headers).forEach(function(e){s.headers[e]=t.headers[e]}),r?i.requestJson(n,a,s):i.requestRaw(n,a,s)}}]),e}();e.exports=u},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(){var e=new i;return e.getMic().then(function(){return e})}Object.defineProperty(t,"__esModule",{value:!0}),t.getMic=s;var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(){n(this,e),this.bufferSize=0,this.context_=null,this.source_=null,this.scriptProcessor_=null}return o(e,[{key:"setMedia_",value:function(){navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,window.AudioContext=window.AudioContext||window.webkitAudioContext}},{key:"stop",value:function(){return this.context_.suspend()}},{key:"start",value:function(){return this.context_.resume()}},{key:"sampleRate",value:function(){return this.context_.sampleRate}},{key:"getMic",value:function(){var e=this;return this.setMedia_(),new Promise(function(t,r){if(!navigator.getUserMedia)return console.log("no media"),r(new Error("Your browser does not support media API"));navigator.getUserMedia({video:!1,audio:!0},function(r){console.log("got audio"),e.context_=new AudioContext,e.source_=e.context_.createMediaStreamSource(r),e.scriptProcessor_=e.context_.createScriptProcessor(e.bufferSize,1,1),e.scriptProcessor_.onaudioprocess=function(t){return e.processInput_(t)},e.source_.connect(e.scriptProcessor_),e.scriptProcessor_.connect(e.context_.destination),e.context_.suspend(),t()},function(e){console.log("Get mic: the following error occured: "+e),r(e)})})}},{key:"onInput",value:function(e){console.log("call onInput")}},{key:"processInput_",value:function(e){this.onInput(e.inputBuffer.getChannelData(0))}}]),e}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,